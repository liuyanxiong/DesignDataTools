install.packages("UsingR")
?lines
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
model1=lm(y~0+x)
summary(model1)
library(datasets)
data(mtcars)
summray(mcars)
summary(mcars)
summary(mtcars)
View(mtcars)
model2=lm(mpg~wt)
model2=lm(mtcars$mpg~mtcars$wt)
summary(model2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(caret)
install.packages("caret")
install.packages("kernlab")
library(caret)
install.packages(ggplot2)
install.packages(colorspace)
install.packages("colorspace")
install.packages("ggplot2")
library(caret)
library(kernlab)
data(spam)
?createDataPartition
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
install.packages(AppliedPredictiveModelling)
install.packages("AppliedPredictiveModelling")
lambda = 0.2
n = 40
nosim = 1000
set.seed(512)
exp_sim <- function(n, lambda)
{
mean(rexp(n,lambda))
}
sim <- data.frame(ncol=2,nrow=1000)
names(sim) <- c("Index","Mean")
for (i in 1:nosim)
{
sim[i,1] <- i
sim[i,2] <- exp_sim(n,lambda)
}
sample_mean <- mean(sim$Mean)
sample_mean
theor_mean <- 1/lambda
theor_mean
hist(sim$Mean,
breaks = 100,
prob = TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = theor_mean,
col= 3,
lwd = 2)
abline(v = sample_mean,
col = 2,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
bty = "n",
lty = c(1,1),
col = c(col = 3, col = 2))
sample_var <- var(sim$Mean)
theor_var <- ((1/lambda)^2)/40
sample_var
theor_var
hist(sim$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
xfit <- seq(min(sim$Mean), max(sim$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 3, lwd = 2)
legend('topright', c("Theoretical Curve"),
lty = 1,lwd = 2, bty = "n", col = 3)
hist(sim$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
lines(density(sim$Mean))
abline(v = 1/lambda, col = 3)
xfit <- seq(min(sim$Mean), max(sim$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Simulated Values", "Theoretical Values"),
bty = "n", lty = c(1,2), col = c(4, 3))
qqnorm(sim$Mean,
main ="Normal Q-Q Plot")
qqline(sim$Mean,
col = "3")
?hist
sessionInfo()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
library(datasets)
data(ToothGrowth)
dataset<-data(ToothGrowth)
dataset<-data.frame(data(ToothGrowth))
View(dataset)
summary(ToothGrowth)
View(ToothGrowth)
View(ToothGrowth)
View(ToothGrowth)
dose.low<-subset(ToothGrowth,ToothGrowth$dose==0.5)
dose.mid<-subset(ToothGrowth,ToothGrowth$dose==1.0)
dose.hig<-subset(ToothGrowth,ToothGrowth$dose==2.0)
View(dose.hig)
View(ToothGrowth)
librry(dataset)
library(dataset)
library(data)
data(mtcars)
summary(mtcars)
View(mtcars)
install.packages("MASS")
fit <- lm(mpg~disp+hp+wt+drat, data=mtcars)
qqPlot(fit, main="QQ Plot")
install.packages("qqPlot")
install.packages("car")
install.packages("caret")
install.packages("randomforest")
install.packages("randomForest")
downloadcsv <- function(url, nastrings) {
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(temp, na.strings = nastrings)
unlink(temp)
return(data)
}
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <- downloadcsv(trainurl, c("", "NA", "#DIV/0!"))
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- downloadcsv(testurl, c("", "NA", "#DIV/0!"))
downloadcsv <- function(url, nastrings) {
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(temp, na.strings = nastrings)
unlink(temp)
return(data)
}
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <- downloadcsv(trainurl, c("", "NA", "#DIV/0!"))
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- downloadcsv(testurl, c("", "NA", "#DIV/0!"))
library(caret)
install.packages("caret", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(caret)
install.packages("caret", repos=c("http://www.rstudio.com/products/rpackages"", "http://cran.rstudio.com"))
install.packages("caret", repos=c("http://www.rstudio.com/products/rpackages/", "http://cran.rstudio.com"))
library(caret)
install.packages("quantreg")
library("caret")
install.packages("scales")
library("caret")
library("caret")
library("quantreg")
View(mtcars)
setwd("C:/Users/USER/Desktop/Assignment/Shiny")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("curl")
devtools::install_github('rstudio/shinyapps')
